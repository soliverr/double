<?xml version="1.0" encoding="utf-8"?>

<article xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink" 
         xml:lang="ru">

  <info>
    <title>Дубль</title>
    <title xml:lang="en">Double</title>
    
    <subtitle>Программа, которой нет!</subtitle>
    <subtitle xml:lang="en">The Program that does not exist!</subtitle>    

    <authorgroup>
        <author>
            <personname>Кряжевских Сергей</personname>
            <personname xml:lang="en">Kryazhevskikh Sergey</personname>
            <email>soliverr@gmail.com</email>
        </author>
    </authorgroup>

    <copyright>
        <year>2016</year>
        <holder>Public Domain</holder>
    </copyright>
    
    <edition>1.0</edition>
    <date>2016-04-07</date>
    
    <abstract xml:id="abstract"> 
      <para>
      <emphasis role="strong">Дубль</emphasis>: Сохраняйте, структурируйте, воспроизводите, обменивайтесь собственными
      знаниями и личным опытом.
      </para> 
    </abstract> 
  </info>
  
  <section xml:id="common_introduction">
    <title>Введение</title>
    <title xml:lang="en">Introduction</title>

    <para>
    Работая за компьютером, мы часто изобретаем свои уникальные способы взаимодействия с программной вычислительной средой,
    организуем наши данные понятным нам способом, автоматизируем собственные приёмы работы. С течением времени мы так или иначе
    накапливаем личный опыт действий в вычислительной среде. Мы устанавливаем и настраиваем для себя рабочую среду и необходимые
    нам программы, организуем хранение документов и медиафайлов, делаем или не делаем резервное копирование и выполняем
    множество других действий в <emphasis>"вычислительной окружающей среде"</emphasis>.
    </para>

    <para>
    Вычислительные системы проникают во все сферы нашей жизнедеятельности. И мы используем разнообразные устройства,
    взаимодействуя друг с другом или какими-то общественными структурами, социальными или государственными службами.
    Всё больше информации преобразуется в электронную форму, доступную для обработки в <emphasis>вычислительной окружающей
    среде</emphasis>. Мы сами можем делать заметки и описывать удачные или неудачные попытки взаимодействий.
    </para>

    <para>
    Параллельно с нашей <emphasis>социальной</emphasis> окружающей средой создана, функционирует и развивается
    <emphasis>вычислительная</emphasis> окружающая среда, которая всё теснее переплетается с реальной жизнью и воздействует на
    неё.
    </para>
    
    <para>
    Когда мы хотим сохранить полезные знания для будущего, поделиться ими с другими или просто для того, что бы "не забыть", мы,
    естественно, пишем какой-либо текст. Мы можем написать заметку, статью или обстоятельное сообщение и разместить его в
    публичной Wiki, журнале или газете, в форуме, собственном блоге или социальной сети. Мы, конечно же, постараемся выразить
    свои знания таким образом, что бы они были как можно более понятны, что бы последующая их интерпретация (прочтение и
    применение) вызывала как можно меньше проблем. Тогда наша заметка или статья станет популярной у большего числа
    людей, мы, даже, сможем получить какую-то обратную связь, что-то вроде <emphasis>"Круто! Я сделал, как написано, и получил
    то, что хотел!"</emphasis>. 
    </para>

    <para>    
    Глобальные поисковые системы заметно облегчают нам поиск необходимой информации: поисковые запросы ранжируются по
    популярности, результаты поиска ранжируются по релевантности, контексту, области применения. Наши повседневные запросы
    <emphasis>"как сделать"</emphasis> и потребности в информации обеспечиваются множеством сайтов, журналов, экспертных
    сообществ и форумов, дающих обоснованные и не очень советы и объяснения, приводящие аргументы за и против, дающие порядок
    действий и инструкции по выполнению определённых действий. На однин поисковый запрос <emphasis>"как сделать"</emphasis>
    можно получить десятки, если не сотни, ссылок на различные тексты. Часть этих текстов необходимо прочитать, понять и
    попробовать воспроизвести инструкции и действия, описанные в них. Если попробовать записать данный способ достижения цели,
    то он может значительно или не очень отличаться от найденных инструкций. Получается, что в процессе интерпретации знаний
    генерируются дополнительные <emphasis>новые</emphasis> знания.
    </para>

    <para>
    Как мы видим, процесс генерации знаний бесконечен. Конечно время их использования. Знания сохраняют свою актуальность при
    активном использовании. Спустя некоторое время мы забываем все детали и тонкости, меняются вычислительные системы,
    обновляются программы и становиться проще найти новую статью <emphasis>"как сделать"</emphasis>, чем вспомнить и разобраться
    в своих же заметках и описаниях действий.
    </para>

    <para>
    Существует множество программ и публичных сервисов типа 
    <link xlink:href="https://ru.wikipedia.org/wiki/%D0%9F%D0%B5%D1%80%D1%81%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D1%8B%D0%B9_%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80">PIM</link>, 
    <link xlink:href="https://ru.wikipedia.org/wiki/%D0%92%D0%B8%D1%80%D1%82%D1%83%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D1%86%D0%B8%D1%84%D1%80%D0%BE%D0%B2%D0%BE%D0%B9_%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D0%BD%D0%B8%D0%BA">VDA</link>, 
    <link xlink:href="https://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D1%80%D0%BC%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9_%D0%BF%D0%B5%D1%80%D1%81%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D0%BA%D0%BE%D0%BC%D0%BF%D1%8C%D1%8E%D1%82%D0%B5%D1%80">PDA</link>
    и т.п., позволяющих организовать личную информацию, оказывающих помощь в социальных взаимодействиях (заказ билетов,
    бронирование гостиниц и пр.). Эти программы предназначены для личного использования или обеспечивают групповую
    работу или функции социальных сетей.
    </para>

    <para>
    В среде системного администрирования вычислительных комплексов развиваются проекты управления программной конфигурацией
    вычислительных систем (
    <link xlink:href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%BE%D0%B5_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5">configuration management</link>). 
    В среде сетей передачи данных - проекты программно-определяемых сетей (
    <link
    xlink:href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE-%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F%D0%B5%D0%BC%D0%B0%D1%8F_%D1%81%D0%B5%D1%82%D1%8C">SDN</link>).
    </para>

    <para>
    Наверное, самый популярный способ организации собственных знаний на сегодняшний день - это использование Wiki-подобных
    программ, в виде публичных или локальных сервисов. Wiki - это отличный способ делать записи на различные темы и связывать
    эти записи между собой или с какими-то внешними источниками информации.
    </para>

    <para>
    Проблема с Wiki, как и с другими способами организации знаний (блоги, форумы и т.д.) в том, что они представляют знания
    пассивно. Нужен человек, который бы начал интерпретировать эти знания, то есть, выполнять действия, которые описаны на
    какой-то странице в Wiki. Если такие инструкции относятся к действиям в вычислительной среде, то не так уж и необходим
    человек для их выполнения.
    </para>

    <para>
    Но есть ли такие концепции и программные проекты, которые предназначены для организации ваших действий, вашего личного
    опыта взаимодействия с в вычислительной окружающей среде?
    </para>

    <para>
    Кажется, что подобных программ и концепций нет. Именно поэтому и возникла идея проекта <emphasis role="strong">Дубль</emphasis>.
    </para>


  </section>
  
  <section xml:id="double_introduction">
    <title>Для чего нужен <emphasis>Дубль</emphasis>?</title>
    <title xml:lang="en">What needed <emphasis>Double</emphasis> for?</title>

    <para>    
    <emphasis>Проект Дубль</emphasis> задумывается не как программа, а как эволюционный способ организации собственных знаний и личного опыта с целью их последующего автоматического
    воспроизведения в сходных ситуациях или условиях окружающей (в том числе вычислительной) среды. Например, у вас может быть любимый текстовый редактор (программа или публичный сервис) 
    и вы хотите, что бы этот редактор присутствовал на всех тех компьютерах, где вам приходится работать, а в среде мобильных устройств присутствовал редактор, максимально близкий по функционалу
    или, по крайней мере, программа позволяющая открывать и просматривать файлы подготовленные в вашем редакторе. Или вы хотите, что бы тема рабочего пространства на всех ваших устройствах была
    более или менее одинакова. Или вы долго бились над компиляцией какого-нибудь очень нужного и интересного вам открытого программного проекта, разобрались со множеством ошибок на этапе компиляции,
    установили множество дополнительных библиотек, наконец, получили работающее приложение и теперь возникла необходимость повторить ваш путь решения на другом компьютере, в другой версии 
    дистрибутива операционной системы.
    </para>

    <para>
    Каждый раз при решении подобных задач возникает необходимость в сохранении накопленных личных знаний. Но пассивный способ сохранения знаний приводит к тому, что знания становятся неактуальными,
    попытки их повторного воспроизведения проваливаются, в мире появляются более понятные и простые инструкции для достижения тех же самых целей и становиться проще разобраться в этой новой информации,
    чем в своих же накопленных "знаниях".
    </para>

    <para>
    Это происходит из-за того, что накопленные пассивным способом в виде записок знания, не являются собственно знаниями: это записанный набор фактов, гипотез и пояснений для их последующей интерпретации.
    При такой пассивной записи, первоочередной становиться именно сама задача записи знаний, то есть сохранения каким-то образом выраженных фактов. Их дальнейшая интерпретация и попытки воспроизведения
    откладываются на будущее.
    </para>

    <para>    
    <emphasis>Проект Дубль</emphasis> призван сместить фокус с хранения знаний, на их воспроизведение. При организации своих личных знаний, первое, о чём необходимо задуматься, это, каким образом
    эти знания могут быть воспроизведены, как на процесс воспроизведения будут влиять изменения окружающей среды, как оценить и верифицировать, что воспроизведение знаний привело к тому же или схожему
    результату и оправдало ожидания.
    </para>

    <para>
    Так как возникает задача автоматического воспроизведения знаний, то <emphasis>проект Дубль</emphasis> должен каким-то образом реализовать программу, выполняющую эти функции. Однако, программа должна
    создаваться по мере необходимости при появлении новых функций. Другими словами, программа Дубль должна иметь возможность самостоятельно расширять свой функционал на основе некоторого описания.
    То есть, организуя своё знание по выполнению каких-либо действий, необходимо также организовать знания для воспроизведения этих действий: например, описав метод установки какой-то необходимой программы
    в операционной системе, необходимо также сохранить способ (код на каком-либо языке программирования) для реализации этого метода в автоматическом режиме. Программа Дубль должна "осознавать", может ли она
    интерпретировать предложенные ей "знания", или она должна модифицировать себя, для успешной интерпретации знаний этого нового вида.
    </para>

    <para>
    Данный документ является частью <emphasis>проекта Дубль</emphasis> и строится на изложенных здесь принципах. На основании изложенных здесь знаний можно получить исполняемую программу и использовать её как основу для дальнейшего
    накопления и организации собственных знаний. Важно отметить, что и начальная версия программы и её развитие могут быть какими угодно, так как это зависит от целей конкретного человека, читающего данный документ.
    В <emphasis>проекте Дубль</emphasis> нет отдельно существующей и отдельно разрабатываемой программы. Программа может получиться в результате выполнения каких-либо действий, описанных в данном документе.
    </para>

    <para>
    Эта часть является центральной поворотной точкой <emphasis>проекта Дубль</emphasis>. Если вы имеете своё собственное представление об организации знаний и, даже, имеете необходимое программное обеспечение, то дальнейшие рассуждения
    могут показаться вам бессмысленными. Если же вы хотите попытаться организовать свои знания, но не знаете с чего начать, то скорее всего, нам по пути. По пути <emphasis>проекта Дубль</emphasis>!
    </para>

  </section>

  <section xml:id="semantic_web">
    <title>Semantic Web: XML, RDF, RDFa и другие</title>
    <title xml:lang="en">Semantic Web: XML, RDF, RDFa and others</title>
    <para>
    Таким образом, идеи 
    <link xlink:href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D0%BC%D0%B0%D0%BD%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%BF%D0%B0%D1%83%D1%82%D0%B8%D0%BD%D0%B0">Semantic Web</link>
    по синтезу "человеческих" и "машинных" знаний и способу их выражения находят широкий спектр приложений.
    </para>


    <para>
    Основные идеи объединения человеческих и машинных знаний выражены в виде стандартов консорциума W3C и объединяются понятием Semantic Web. Здесь мы рассмотрим некоторые основные принципы, заложенные в основу
    представления знаний для вычислительных систем и человека. Собственно говоря, многозначность человеческого языка, контекст и смысл высказывания уточняются и более-менее однозначно маркируются с тем, чтобы
    предоставить возможность автоматической обработки информации с помощью вычислительных систем.
    </para>

    <para>
    XML - реализует идею представления информации в понятной форме как для человека, так и для компьютера. Он определяет базовую модель элемента данных: сущность и её атрибуты; и модель представления: вложенная древовидная структура
    когда сущности располагаются иерархически, но смысл этих иерархических связей не задаётся. Зачастую, вложенные сущности рассматриваются как атрибуты сущностей, расположенных выше по иерерхии.
    </para>

    <para>
    XML реализует самую простейшую модель представления данных, а также вводит типизацию данных в виде схемы XSD. Это позволило использовать этот формат достаточно широко, так как данные, представленные в этом формате могут быть 
    интуитивно правильно интерпретированы человеком. Основная сложность - это правильная интерпретация подобного рода данных другой программой. Именно об этих проблемах пишет в своей статье "Why RDF model is different from the XML model"
    https://www.w3.org/DesignIssues/RDF-XML.html Тим Бернс-Ли. В ходе поиска решения данной проблемы появился формат описания RDF.
    </para>

    <para>
    RDF реализует модель представления данных в виде триплетов: субъект - отношение - объект. Таким образом, при машинной обработке каждый элемент данных однозначно определеяется как одна из частей триплета, что устраняет неоднозначность
    описания с помощью XML. Эта отличная идея однако достаточно трудна в реализации, поскольку требует полной классификации всех элементов данных с позиций триплета.
    </para>

    <para>
    RDFa возник как один из способов избежать громозкости описаний с помощью RDF. Идея заключается в том, что семантические маркеры встраиваются в данные по мере необходимости, не ко всем элементам, а только к необходимым, наиболее
    существенным. То есть, RDFa - это своего рода подсказки для однозначной интерпретации определённых элементов информации. Данная идея получила большее развитие в так называемых микроформатах. Эти форматы ещё более упрощают способ
    семантической разметки элементов информации. Дальнейшее упрощение семантической разметки реализовано в так называемых микроданных, объединеннёх и продвигаемых проектом schema.org.
    </para>

    <para>
    Таким образом, идея разметки информации (в частности, текстов) позволяет закрепить определённый способ обработки соответствющих маркеров разметки. Это позволяет реализовать модель представления информации в вычислительных системах.
    Аналогичным образом действует и семантическая разметка: позволяет закрепить модель представления знаний и осуществить интерпретацию элементов информации с позиций человека или осмысленным с точки зрения человека способом.
    </para>
  </section>

  <section xml:id="data_metadata">
    <title>Данные и метаданные</title>
    <title xml:lang="en">Data and metadata</title>

  </section>

  <section xml:id="make_knowledge">
    <title>Когда данные становятся знаниями</title>
    <title xml:lang="en"> When data becomes knowledge</title>

    <para>
    Когда же данные становятся знаниями? Что совершенно необходимо, что бы от рассуждений о накопленных фактах перейти к рассуждениям об использовании знаний. Видимо, существенным является то, что называется вывод на знаниях.
    То есть, обработка данных таким образом, чтобы добиться достижения цели. При этом цель формулируется человеком для вычислительной системы. Как только вычислительная система начинает действовать с общей с человеком целью,
    так возникает обработка знаний: требуются модели представления, пригодные для процедуры вывода на знаниях, требуются модели, позволяющие представлять знания внутри вычислительных систем.
    </para>

 </section>

        <para>
        Усилия в области уменьшения разрыва в интерпретации информации человеком и компьютером привели к созданию расширяемого языка разметки XML.
        Основная идея заключается в том, чтобы использую как можно меньше метаданных, таким образом представить данные, чтобы они могли быть
        сходным образом интерпретированы человеком и вычислительной системой.</para>
  </section>


 <para>
    Таким образом в рамках проекта Дубль не должно существовать некоей конкретной программы, реализующей некоторый конкретный функционал. Программа может создаваться динамически и существовать только на момент
    своего исполнения. То есть, описание каких-либо знаний должно включать и описание программы, способной их обработать.
    </para>

    Если различные действия уже тем или иным способом описаны и могут быть поняты и воспроизведены человеком, то их автоматическое или полуавтоматическое воспроизведение вызывает трудности.

    Это связано со способом описания подобных действий.

    В области системного администрирования вычислительных систем усилия по автоматизации привели к созданию специализированных программных проектов, позволяющих автоматически воспроизводить
    действия по настройке системного и прикладного программного обеспечения на серверах или рабочих станциях.


    Зачастую
    подобного рода статьи неявно требуют определённых базовых знаний в области информационных (компьютерных) технологий. Даже
    если в статье приводится точный порядок действий в виде исполняемых команд, повторение этого порядка не гарантирует
    достижение желаемого результата: могут возникнуть непредвиденные автором текста ошибки, интерпретация которых, требует
    определённого уровня знаний.
    </para>

    <para>
    Возникает вопрос: <emphasis>почему вычислительная система не может самостоятельно или с некоторым участием человека воспроизвести необходимую 
    последовательность действий для достижения желаемой цели?</emphasis>
    </para>

    <para>
    В поисках ответа на этот вопрос появилась идея <emphasis>проекта Дубль</emphasis>: <emphasis>так организовать и выразить знания, 
    что бы в дальнейшем эти знания могли быть воспроизведены на другом компьютере.</emphasis>
    </para>
    
    <para>
    Именно организовать и выразить знания, а не создать программу для хранания и обработки
    данных, знаний. При этом, знания могут быть из совершенно разных сфер человеческой деятельности. Непременным условием является
    <emphasis>возможность воспроизведения этих знаний в вычислительной среде.</emphasis> Вот типичные примеры подобного рода знаний:
    
        <itemizedlist>
            <listitem><para>организация и настройка графического окружения рабочего стола типичным для пользователя способом, 
            так называемый <emphasis>"тюнинг"</emphasis> программы менеджера рабочего окружения;</para></listitem>
            <listitem><para>установка и настройка привычного набора программ, создание привычной иерархии каталогов в файловой 
            системе и прочее.</para></listitem>
        </itemizedlist>
    </para>

    <para>
    С одной стороны, подобные знания носят индивидуальный характер - это способ и приёмы, которые использовались человеком при работе 
    в вычислительной среде при решении определённых задачь и достижении определённых целей. С другой стороны, цели и решаемые задачи - более
    универсальные понятия, поскольку возникают у достаточно большого количества пользователей. Так как вычислительные системы имеют разную
    природу: различные операционные системы, различный набор доступного программного обеспечения, различные аппаратные платформы и архитектуры, - 
    то это сказывается на используемые в работе способы и приёмы.
    </para>

    <para>
    Другими словами, можно сказать, что способы и приёмы работы в вычислительной среде варьируются в зависимости от параметров данной среды.
    При этом, сам человек может выбирать тот или иной способ работы в зависимости от своих предпочтений.
    </para>

    <para>
    Одним из наиболее ярких примеров разнообразия методов в зависимости от параметров вычислительной среды и личных предпочтений человека-пользователя
    являются методы установки программного обеспечения. Программное обеспечение может быть установлено из готовых системных <emphasis>"пакетов"</emphasis> из
    специальных архивов дистрибутива операционной системы; с помощью специальных программ установки из публичных архивов языковой среды (Python, Perl,
    Ruby, R и т.п.); из исходных текстов, доступных на сайтах OpenSource проектов; из заранее подготовленного архива для коммерческих программных проектов.
    </para>

    <para>    
    <emphasis>Проект Дубль</emphasis> - это поиск способа описания 
    целей и медотов их достижения в различных вычислительных средах, сохранения и организации индивидуальных знаний, который бы сделал возможным
    обмен и воспроизведение эффективных приёмов работы в вычислительных системах.
    </para>

    </section>
<!--    
    Эволюция, накопление знаний

    Цель создания проекта Дубль

    Основная проблема искусственного интеллекта - это самостоятельное свободное целеполагание. Человеческий интеллект может формулировать для себя
    цели и искать способы их достижения. Искусственный интеллект на текущий момент пользуется заранее сформулированными целями, заложенными на этапе
    его создания. В этом смысле искусственный интеллект не является самостоятельным и всегда выполняет роль помощника для человека.

    В рамках проекта Дубль область взаимодействия вычислительной системы и человека ещё более ограничивается. Основная общая цель - воспроизведение
    приёмов работы в вычислительной системе в автоматическом режиме. "Дубль" должен позволять осуществлять поиск наиболее подходящих с точки
    зрения человека-пользователя способов работы в вычислительной среде. В этом смысле "Дубль" - это своего рода экспертная система.

-->
    <para>
    Общепринятый подход к созданию программных систем искусственного интеллекта или экспертных систем предполагает внутреннее представление данных,
    называемых знаниями, и правила работы с этими данными, называемых логическим выводом или выводом на знаниях. Дальнейшая работа с такой системой
    требует процедуры ввода знаний, то есть представления знаний человека в формате данной системы ИИ с тем, чтобы полученные результаты вывода на
    знаниях могли быть однозначно интерпретированы человеком.
    </para>
    
<!--
    Система ИИ в этом случае оперирует какой-то внутренней моделью, называемой 
    моделью представления знаний, которая позволяет системе ИИ получать результаты, понятные человеку. Как только эти результаты становятся непонятны
    человеку, говорят об ошибках вывода на знаниях, ошибках в представлении знаний и пр. 
-->
<!--
    Основной идеей создания проекта Дубль, является не написание программы. Программа, реализующая концепции и идеи проекта Дубль может появиться в
    результате накопления знаний и необходимости их автоматического воспроизведения. Каких-то конкретных знаний, а не знаний в общем смысле.
-->
<!--
    Если взять пример с установкой программного обеспечения. Человек сформулировал цель: "Установить программное обеспечение", затем человек придумал
    как он будет описывать процесс установки, а затем может реализовать небольшую программу, которая прочитает это описание и выполнит необходимые
    действия.
-->
<!--
    Данные и метаданные
-->


<!--
    <para>
        Со времён изобретения человечеством письменности в процессе организации знаний мало что изменилось. Знания накапливаются
        в том или ином виде в письменных источниках. Их обработка связана с процессом чтения и дальнейшего осмысления 
        прочитанного материала. Процесс "вывода на знаниях" или генерации новых идей скрыт в глубинах сознания человека разумного.
    </para>
    
    <para>
        Что несомненно изменилось в XXI веке, так это способы хранения, представления и обмена знаниями. С развитием вычислительных
        систем и систем связи появились понятия <emphasis>"информация"</emphasis> и <emphasis>"данные"</emphasis>.
    </para>
    
    <para>
        Развитие технических средств и, особенно, вычислительной техники сделало возможным накапливать огромные объёмы данных,
        передавать огромные объёмы информации. Новые данные стали генерировать не только люди, но и вычислительные машины,
        устройства, приборы.
    </para>
    
    <para>
        В вычислительных системах данные всегда организованы каким-либо образом, облегчающим их обработку в данной вычислительной
        системе. По мере увеличения разнообразия вычислительных систем возникла потребность в обмене накопленными данными между
        вычислительными системами; стали появляться специальные форматы обмена данными. Постепенно появилась потребность
        представления таких данных обмена для человека в специальном формате, доступном для чтения как вычислительной системой
        так и человеком.
    </para>
    
    <para>
        По мере развития такого рода форматов обмена данными, появилась потребность однозначной интерпретации этих форматов
        различными <emphasis>"системами обработки"</emphasis>, включая человека. Потребовалось обмениваться не просто набором данных,
        но и "метаданными", включающими семантику исходных данных: типы данных, методы (алгоритмы) их обработки.
    </para>
    
    <para>
        Своего рода бум произошёл после разработки консорциумом W3C специального языка для представления данных XML. XML ввёл достаточно
        простую модель представления данных и синтаксис её описания. Сущности, используемые в данной модели: записи и их атрибуты. В XML
        атрибут является частью сущности; взаимодействие сущностей никак не регламентируется. XML ввёл в обиход понятие схемы данных, которая
        определяет типы используемых сущностей: какие атрибуты и какого машинного типа представления могут быть у сущности; какие сущности
        могут быть вложены в другие сущности.
    </para>

    <para>
        В XML получили своё выражение два аспекта вычислительных систем:
         <itemizedlist>
            <listitem><para>Все данные, используемые вычислительными системами имею свой тип (integer, float, double, char и т.п.).
            Это свойство данных является неотъемлемой частью вычислительных систем и неразрывно связано с аппаратной архитектурой и
            устройством вычислительных систем.</para></listitem>
            <listitem><para>Данные объединяются по средством специальных структур, называемых записями (records). Это свойство данных,
            по-видимому, связано с восприятием человеком некоторого набора объектов в виде множества и оперированием таким множеством,
            как единым объектом. Множество (запись) и объекты, его составляющие (поля), интуитивно воспринимаются в виде отношения 
            "часть - целое". При этом в запись входят данные различных "машинных" типов.</para></listitem>
    </para>

    <para>
        Извечный камень преткновения вычислительных систем - каким образом рассматривать алгоритмы обработки данных: способы обработки данных,
        выраженные на каком-либо языке программирования?
    </para>

    <para>
        Исторически, прогрммная область, трактовалась как специальная область данных, которые может исполнять вычислительная система. 
        Таким образом, данные, организованные в какие-либо записи, и программа, стали разделяться и храниться отдельно друг от друга.
        Наборы данных, представляющие программы, снабжались метаданными, которые позволяли однозначно интерпретировать их как предназначенные
        для исполнения. А просто наборы данных, снабжались метаданными, которые позволяли однозначно интерпретировать структуру их записей.
    </para>

        Если оставить в стороне различия в архитектурах вычислительных систем, а также различные варианты компоновки программ и данных, то
        можно обнаружить, что на сегодняшний момент основным способом различения наборов данных является расширение файлов, хранящих в себе
        данные или программы. Это пример объединения метаданных и данных в одной сущности, называемой файл. Существование метаданных расширения
        поддерживается тем, что в вычислительных системах реализовано множество алгоритмов, поведение которых управляется 
        метаданными-расширением: поиск программы для просмотра и редактирования файла, возможность запуска файла на исполнение, изменение
        представления файла в рабочей среде человеко-машинного интерфейса и пр.

        Эволюция понятия записи, привела к появлению понятия класс и инкапсуляции - объединению данных и методов их обработки в единой
        структуре. Это реализовано в парадигме ООП. Интересной особенностью развития ООП является то, что появились своего рода метапрограммы,
        реализующие условия, в которых стало возможно объединять данные и методы их обработки, а также выполнять вызов подобных методов, то
        есть, фактически, выполнять обработку данных.

        Таким образом, можно увидеть следующие тенденции развития взаимоотношений данных и программ
        * данные эволюционируют путём добавления метаданных
        * метаданные влияют на появление новых программ для их обработки
        * программы реализуют среду, в которой данные и метаданные определённого уровня, интерпретируются однозначно с тем, что 
        было заложено человеком на этапе проектирования и создания набора данных и программы их обработки

        Имея набор данных необходимо написать программу для их обработки, для этого требуется описать метаданные и создать алгоритмы. То есть,
        единая сущность операция с данным в связи с особенностью выч систем разделяется на метаданные и алгоритмы их обработки Для их выражения
        использовались разные средства.

    <para>
        Со времён изобретения человечеством письменности в процессе организации знаний мало что изменилось. Знания накапливаются
        в том или ином виде в письменных источниках. Их обработка связана с процессом чтения и дальнейшего осмысления 
        прочитанного материала. Процесс "вывода на знаниях" или генерации новых идей скрыт в глубинах сознания человека разумного.
    </para>
    
    <para>
        Что несомненно изменилось в XXI веке, так это способы хранения, представления и обмена знаниями. С развитием вычислительных
        систем и систем связи появились понятия <emphasis>"информация"</emphasis> и <emphasis>"данные"</emphasis>.
    </para>
    
    <para>
        Развитие технических средств и, особенно, вычислительной техники сделало возможным накапливать огромные объёмы данных,
        передавать огромные объёмы информации. Новые данные стали генерировать не только люди, но и вычислительные машины,
        устройства, приборы.
    </para>
    
    <para>
        В вычислительных системах данные всегда организованы каким-либо образом, облегчающим их обработку в данной вычислительной
        системе. По мере увеличения разнообразия вычислительных систем возникла потребность в обмене накопленными данными между
        вычислительными системами; стали появляться специальные форматы обмена данными. Постепенно появилась потребность
        представления таких данных обмена для человека в специальном формате, доступном для чтения как вычислительной системой
        так и человеком.
    </para>
    
    <para>
        По мере развития такого рода форматов обмена данными, появилась потребность однозначной интерпретации этих форматов
        различными <emphasis>"системами обработки"</emphasis>, включая человека. Потребовалось обмениваться не просто набором данных,
        но и "метаданными", включающими семантику исходных данных: типы данных, методы (алгоритмы) их обработки.
    </para>
    
    <para>
        Своего рода бум произошёл после разработки консорциумом W3C специального языка для представления данных XML. XML ввёл достаточно
        простую модель представления данных и синтаксис её описания. Сущности, используемые в данной модели: записи и их атрибуты. В XML
        атрибут является частью сущности; взаимодействие сущностей никак не регламентируется. XML ввёл в обиход понятие схемы данных, которая
        определяет типы используемых сущностей: какие атрибуты и какого машинного типа представления могут быть у сущности; какие сущности
        могут быть вложены в другие сущности.
    </para>

    <para>
        В XML получили своё выражение два аспекта вычислительных систем:
         <itemizedlist>
            <listitem><para>Все данные, используемые вычислительными системами имею свой тип (integer, float, double, char и т.п.).
            Это свойство данных является неотъемлемой частью вычислительных систем и неразрывно связано с аппаратной архитектурой и
            устройством вычислительных систем.</para></listitem>
            <listitem><para>Данные объединяются по средством специальных структур, называемых записями (records). Это свойство данных,
            по-видимому, связано с восприятием человеком некоторого набора объектов в виде множества и оперированием таким множеством,
            как единым объектом. Множество (запись) и объекты, его составляющие (поля), интуитивно воспринимаются в виде отношения 
            "часть - целое". При этом в запись входят данные различных "машинных" типов.</para></listitem>
    </para>

    <para>
        Извечный камень преткновения вычислительных систем - каким образом рассматривать алгоритмы обработки данных: способы обработки данных,
        выраженные на каком-либо языке программирования?
    </para>

    <para>
        Исторически, прогрммная область, трактовалась как специальная область данных, которые может исполнять вычислительная система. 
        Таким образом, данные, организованные в какие-либо записи, и программа, стали разделяться и храниться отдельно друг от друга.
        Наборы данных, представляющие программы, снабжались метаданными, которые позволяли однозначно интерпретировать их как предназначенные
        для исполнения. А просто наборы данных, снабжались метаданными, которые позволяли однозначно интерпретировать структуру их записей.
    </para>

        Если оставить в стороне различия в архитектурах вычислительных систем, а также различные варианты компоновки программ и данных, то
        можно обнаружить, что на сегодняшний момент основным способом различения наборов данных является расширение файлов, хранящих в себе
        данные или программы. Это пример объединения метаданных и данных в одной сущности, называемой файл. Существование метаданных расширения
        поддерживается тем, что в вычислительных системах реализовано множество алгоритмов, поведение которых управляется 
        метаданными-расширением: поиск программы для просмотра и редактирования файла, возможность запуска файла на исполнение, изменение
        представления файла в рабочей среде человеко-машинного интерфейса и пр.

        Эволюция понятия записи, привела к появлению понятия класс и инкапсуляции - объединению данных и методов их обработки в единой
        структуре. Это реализовано в парадигме ООП. Интересной особенностью развития ООП является то, что появились своего рода метапрограммы,
        реализующие условия, в которых стало возможно объединять данные и методы их обработки, а также выполнять вызов подобных методов, то
        есть, фактически, выполнять обработку данных.

        Таким образом, можно увидеть следующие тенденции развития взаимоотношений данных и программ
        * данные эволюционируют путём добавления метаданных
        * метаданные влияют на появление новых программ для их обработки
        * программы реализуют среду, в которой данные и метаданные определённого уровня, интерпретируются однозначно с тем, что 
        было заложено человеком на этапе проектирования и создания набора данных и программы их обработки

        Имея набор данных необходимо написать программу для их обработки, для этого требуется описать метаданные и создать алгоритмы. То есть,
        единая сущность операция с данным в связи с особенностью выч систем разделяется на метаданные и алгоритмы их обработки Для их выражения
        использовались разные средства.

        

    <para>
        Таким образом, "знания" в вычислительных системах представлены как некий набор метаданных над определёнными исходными данными. Семантика
        в метаданных может быть выражена декларативно, либо скрыта в алгоритмах обработки и процедурах в вычислительных системах.
        Метаданные, в свою очередь, могут быть заданы для исходных метаданных более "низкого" уровня. Основным, принципиальным отличием
        нового уровня метаданных, является наличие новых алгоритмов их обработки. Новые алгоритмы обработки могут потребовать
        нового формата представления данных. 
    </para>
    
    <para>
        Принципиальным отличием искуственных систем обработки данных от естественных является наличие алгоритма обработки данных.
        В контексте знаний это вытекает в следующее:
        * проектируется способ представления данных, выражающих знания
        * проектируется алгоритм обработки данных, реализующий обработку знаний ("вывод на знаниях")
        
        Сам по себе алгоритм обрабатывает данные заранее заданным способом и не осознаёт факт обработки "знаний".
    </para>
    
    Получение базовых форматов представления знаний и базовых алгоритмов обработки знаний относится к области искусственного
    интеллекта и экспертных систем.
    
    Создать помощника...
    
    
    <para>
        Потребность в организации личных знаний инспирировало идею создания проекта <emphasis>Дубль</emphasis>.
    </para>
    
    <para>
        Основные принципы, закладываемые в проект <emphasis>Дубль</emphasis>, можно описать следующим образом:
        <itemizedlist mark='baseidea'>
            <listitem><para>Организация знаний начинается любым доступным способом с использованием программно-вычислительных
                            средств.<listitem><para>
            <listitem><para>Знания должны быть представлены в форме доступной для использования вычислительными системами
                            и другими людьми.<listitem><para>
            <listitem><para>Не создавать программу для работы со знаниями до тех пор, пока можно обойтись другими
                            программами.</para></listitem>
            <listitem><para>Не создавать универсальную программу работы со знаниями.</para></listitem>
            <listitem><para>Не создавать всеобщее хранение всех знаний.</para></listitem>            
            <listitem><para>Структуры хранения знаний могут быть разнообразными и отражают способ хранения знаний
                            конкретного человека.</para></listitem>
            <listitem><para>Сохранение знаний с целью их повторного использования. Знания должны быть представлены так, что бы
                            допускалось их повторное периодическое использование вычислительными системами и другими людьми.
                            </para></listitem>
            <listitem><para>Не стремиться к созданию централизованной унифицированной системы хранения и обработки знаний.
                            Знания хранятся и организуются в том месте, где они необходимы в каждый конкретный момент.
                            Знания организуются фрагментарно. Каждый фрагмент может быть организован своим собственным
                            способом.</para></listitem>
            <listitem><para>Методы обмена фрагментами знаний между людьми с использованием программно-вычислительных средств
                            должны быть описаны в создаваемой структуре знаний.</para></listitem>
            <listitem><para>Эволюционный процесс хранения и обработки знаний.</para></listitem>
        </itemizedlist>
    </para>


    <para>
        Знания в системе <emphasis>Дубль</emphasis> должны быть выражены декларативно. В контексте вычислительных систем это 
        означает, что приоритет отдаётся проектированию и описанию структур хранения и способов обработки, а не написанию 
        алгоритмов и программ.
    </para>
    
    <para>
        <emphasis>Первичной целью является получение декларативного описания знаний</emphasis>. В зависимости от способа 
        интерпретации данной декларации могут быть реализованы различные модели и алгоритмы представления и обработки знаний.
    </para>
    
    <section>
        <title>Физическая интерпретация</title>
        
        <para>
            Знания - это своего рода элементарные частицы, которые взаимодействуют друг с другом. Модель ядра Бора - модель фрейма
            при представлении знаний: сильные связи сущности и её обязательных атрибутов, слабые связи - необязательные атрибуты.
            Взаимодействие - организация материи определенного вида знаний. Нахождение законов позволяет новым знаниям встраиваться
            в материю (мир, домен) уже организованных знаний или разрушать её.
        </para>
    </section>
   
    <section>
        <title>Биологическая интерпретация</title>
        
        <para>
            Эволюционный процесс организации знаний, код организации знаний, в котором записан путь от начала к текущему состоянию
            организации. Интерпретация данного кода, сначала человеком, затем программой.
        </para>
    </section>
   
    <section>
        <title>Математическая инерпретация</title>
        
        <para>        
            Сети знаний. Разрозненные сети, организованные внутри себя по определённым правилам. Граф переходов из одного состояния
            в другое. Узлы графа - состояние системы и цели, дуги - действия, которые необходимо совершить. Дуга - это снова граф
            переходов, для решения конкретных задач. 
        </para>
        
        <para>
            Граф-сеть эволюционирует, его можно рассматривать как материю знаний, молекулу.
            Графы зананий можно помещать в различные среды обитания. Законы внешние и внутренние. 
            Закон реализуется в виде программы, представляется в виде графа знаний.
            Цели - сильно связанные частицы знаний, наиболее однозначно представленные знания с точки зрения их повторения и оценки.
            Узель-цель можно интерпретировать как ребро графа для прехода к следующей цели.
        </para>
    </section>
     
  </section>        
  
  <section>
    <title>Semantic web: XML, RDF и RDFa</title>
  </section>
  
  <section>
    <title>Базовый метод представления знаний</title>
  </section>

  <section>
    <title>Элементы знаний</title>
  </section>

  <section>
    <title>Схема знаний Дубль</title>
  </section>
        
  <section>
    <title>Организация знаний Дубль</title>
  </section>
        
    <para>
        Таким образом, "знания" в вычислительных системах представлены как некий набор метаданных над определёнными исходными данными. Семантика
        в метаданных может быть выражена декларативно, либо скрыта в алгоритмах обработки и процедурах в вычислительных системах.
        Метаданные, в свою очередь, могут быть заданы для исходных метаданных более "низкого" уровня. Основным, принципиальным отличием
        нового уровня метаданных, является наличие новых алгоритмов их обработки. Новые алгоритмы обработки могут потребовать
        нового формата представления данных. 
    </para>
    
    <para>
        Принципиальным отличием искуственных систем обработки данных от естественных является наличие алгоритма обработки данных.
        В контексте знаний это вытекает в следующее:
        * проектируется способ представления данных, выражающих знания
        * проектируется алгоритм обработки данных, реализующий обработку знаний ("вывод на знаниях")
        
        Сам по себе алгоритм обрабатывает данные заранее заданным способом и не осознаёт факт обработки "знаний".
    </para>
    
    Получение базовых форматов представления знаний и базовых алгоритмов обработки знаний относится к области искусственного
    интеллекта и экспертных систем.
    
    Создать помощника...
    
    
    <para>
        Потребность в организации личных знаний инспирировало идею создания проекта <emphasis>Дубль</emphasis>.
    </para>
    
    <para>
        Основные принципы, закладываемые в проект <emphasis>Дубль</emphasis>, можно описать следующим образом:
        <itemizedlist mark='baseidea'>
            <listitem><para>Организация знаний начинается любым доступным способом с использованием программно-вычислительных
                            средств.<listitem><para>
            <listitem><para>Знания должны быть представлены в форме доступной для использования вычислительными системами
                            и другими людьми.<listitem><para>
            <listitem><para>Не создавать программу для работы со знаниями до тех пор, пока можно обойтись другими
                            программами.</para></listitem>
            <listitem><para>Не создавать универсальную программу работы со знаниями.</para></listitem>
            <listitem><para>Не создавать всеобщее хранение всех знаний.</para></listitem>            
            <listitem><para>Структуры хранения знаний могут быть разнообразными и отражают способ хранения знаний
                            конкретного человека.</para></listitem>
            <listitem><para>Сохранение знаний с целью их повторного использования. Знания должны быть представлены так, что бы
                            допускалось их повторное периодическое использование вычислительными системами и другими людьми.
                            </para></listitem>
            <listitem><para>Не стремиться к созданию централизованной унифицированной системы хранения и обработки знаний.
                            Знания хранятся и организуются в том месте, где они необходимы в каждый конкретный момент.
                            Знания организуются фрагментарно. Каждый фрагмент может быть организован своим собственным
                            способом.</para></listitem>
            <listitem><para>Методы обмена фрагментами знаний между людьми с использованием программно-вычислительных средств
                            должны быть описаны в создаваемой структуре знаний.</para></listitem>
            <listitem><para>Эволюционный процесс хранения и обработки знаний.</para></listitem>
        </itemizedlist>
    </para>


    <para>
        Знания в системе <emphasis>Дубль</emphasis> должны быть выражены декларативно. В контексте вычислительных систем это 
        означает, что приоритет отдаётся проектированию и описанию структур хранения и способов обработки, а не написанию 
        алгоритмов и программ.
    </para>
    
    <para>
        <emphasis>Первичной целью является получение декларативного описания знаний</emphasis>. В зависимости от способа 
        интерпретации данной декларации могут быть реализованы различные модели и алгоритмы представления и обработки знаний.
    </para>
    
    <section>
        <title>Физическая интерпретация</title>
        
        <para>
            Знания - это своего рода элементарные частицы, которые взаимодействуют друг с другом. Модель ядра Бора - модель фрейма
            при представлении знаний: сильные связи сущности и её обязательных атрибутов, слабые связи - необязательные атрибуты.
            Взаимодействие - организация материи определенного вида знаний. Нахождение законов позволяет новым знаниям встраиваться
            в материю (мир, домен) уже организованных знаний или разрушать её.
        </para>
    </section>
   
    <section>
        <title>Биологическая интерпретация</title>
        
        <para>
            Эволюционный процесс организации знаний, код организации знаний, в котором записан путь от начала к текущему состоянию
            организации. Интерпретация данного кода, сначала человеком, затем программой.
        </para>
    </section>
   
    <section>
        <title>Математическая инерпретация</title>
        
        <para>        
            Сети знаний. Разрозненные сети, организованные внутри себя по определённым правилам. Граф переходов из одного состояния
            в другое. Узлы графа - состояние системы и цели, дуги - действия, которые необходимо совершить. Дуга - это снова граф
            переходов, для решения конкретных задач. 
        </para>
        
        <para>
            Граф-сеть эволюционирует, его можно рассматривать как материю знаний, молекулу.
            Графы зананий можно помещать в различные среды обитания. Законы внешние и внутренние. 
            Закон реализуется в виде программы, представляется в виде графа знаний.
            Цели - сильно связанные частицы знаний, наиболее однозначно представленные знания с точки зрения их повторения и оценки.
            Узель-цель можно интерпретировать как ребро графа для прехода к следующей цели.
        </para>
    </section>
     
  </section>        
  
  <section>
    <title>Semantic web: XML, RDF и RDFa</title>
  </section>
  
  <section>
    <title>Базовый метод представления знаний</title>
  </section>

  <section>
    <title>Элементы знаний</title>
  </section>

  <section>
    <title>Схема знаний Дубль</title>
  </section>
        
  <section>
    <title>Организация знаний Дубль</title>
  </section>
-->

</article>
